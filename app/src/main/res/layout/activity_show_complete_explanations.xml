<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".activity.ShowCompleteExplanationsActivity">

    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/appBarShowComplete"
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <com.google.android.material.appbar.CollapsingToolbarLayout
            android:id="@+id/collapsingToolBar"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:theme="@style/MyCustomToolBar"
            app:contentScrim="@color/blue500"
            app:layout_scrollFlags="scroll|exitUntilCollapsed">

            <ImageView
                android:id="@+id/img_showComplete_collapsing"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:adjustViewBounds="true"
                android:src="@drawable/kotlin_android"
                app:layout_collapseMode="parallax"
                tools:ignore="ContentDescription" />

            <com.google.android.material.appbar.MaterialToolbar
                android:id="@+id/toolBarShowComplete"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                app:layout_collapseMode="pin" />

        </com.google.android.material.appbar.CollapsingToolbarLayout>

    </com.google.android.material.appbar.AppBarLayout>

    <androidx.core.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical"
            android:padding="16dp">

            <TextView
                android:id="@+id/txt_title"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="@color/blackLight"
                android:textSize="30sp"
                tools:text="Kotlin" />

            <TextView
                android:id="@+id/txt_subtitle"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="2dp"
                tools:text="language for android" />

            <View
                android:layout_width="80dp"
                android:layout_height="1dp"
                android:layout_marginTop="10dp"
                android:background="@color/greyLight" />

            <TextView
                android:id="@+id/txt_description"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:lineSpacingExtra="1.7dp"
                android:textColor="@color/blackLight"
                android:textSize="15sp"
                tools:text="Kotlin is a cross-platform, statically typed, general-purpose programming language with type inference. Kotlin is designed to interoperate fully with Java, and the JVM version of Kotlin's standard library depends on the Java Class Library,[5][failed verification] but type inference allows its syntax to be more concise. Kotlin mainly targets the JVM, but also compiles to JavaScript (e.g., for frontend web applications using React[6]) or native code via LLVM (e.g., for native iOS apps sharing business logic with Android apps).[7] Language development costs are borne by JetBrains, while the Kotlin Foundation protects the Kotlin trademark.[8]

On 7 May 2019, Google announced that the Kotlin programming language is now its preferred language for Android app developers.[9] Since the release of Android Studio 3.0 in October 2017, Kotlin has been included as an alternative to the standard Java compiler. The Android Kotlin compiler produces Java 8 bytecode by default (which runs in any later JVM), but lets the programmer choose to target Java 9 up to 17, for optimization,[10] or allows for more features; has bidirectional record class interoperability support for JVM, introduced in Java 16, considered stable as of Kotlin 1.5.

Kotlin support for compilation directly to JavaScript (i.e., the classic back-end) is considered stable since version 1.3, while the new Kotlin/JS(IR) is in beta as of version 1.5.30. The new optimized implementations of Kotlin/JVM(IR) and Kotlin/JS (IR-based) were introduced in version 1.4. Kotlin/JVM(IR) is considered stable and enabled by default since version 1.5. Kotlin/Native (for e.g. Apple silicon support) is considered beta since version 1.3.[11][12]" />

        </LinearLayout>
    </androidx.core.widget.NestedScrollView>

    <com.google.android.material.floatingactionbutton.FloatingActionButton
        android:id="@+id/fabShowComplete"
        android:layout_width="wrap_content"
        android:src="@drawable/ic_wikipedia_w"
        android:layout_height="wrap_content"
        app:layout_anchor="@id/appBarShowComplete"
        app:layout_anchorGravity="bottom|end"
        app:useCompatPadding="true"
        tools:ignore="ContentDescription" />

</androidx.coordinatorlayout.widget.CoordinatorLayout>